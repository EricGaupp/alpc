{"version":3,"sources":["components/EncodeTextInput.jsx","utils/encode.js","components/EncodedValuesCodeBlock.jsx","components/DecodeValuesInput.jsx","utils/decode.js","components/DecodedTextCodeBlock.jsx","components/App.jsx","serviceWorker.js","index.js"],"names":["EncodeTextInput","text","handleTextChange","Grid","item","xs","md","TextField","id","label","color","fullWidth","multiline","rowsMax","value","onChange","encode","input","length","Error","match","map","chunk","byteArray","split","reverse","char","charCodeAt","toString","padStart","join","encodedArray","j","i","push","parseInt","encodeChunk","useStyles","makeStyles","root","backgroundColor","borderRadius","EncodedValuesCodeBlock","classes","className","style","whiteSpace","DecodeValuesInput","handleValueChange","error","helperText","InputProps","startAdornment","InputAdornment","position","endAdornment","decode","Array","isArray","every","chunkArray","decodedChunk","k","filter","String","fromCharCode","decodeChunk","DecodedTextCodeBlock","values","marginTop","App","useState","setText","encodedValues","setEncodedValues","encodedValuesArray","replace","encodedValuesInputError","CssBaseline","Container","maxWidth","container","direction","justify","spacing","Typography","variant","align","event","target","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.b589c40d.chunk.js","sourcesContent":["import React from \"react\";\nimport { Grid, TextField } from \"@material-ui/core\";\n\nconst EncodeTextInput = ({ text, handleTextChange }) => (\n  <Grid item xs={12} md={6}>\n    <TextField\n      id=\"encode-text-input\"\n      label=\"Encode Text Here!\"\n      color=\"secondary\"\n      fullWidth\n      multiline\n      rowsMax={12}\n      value={text}\n      onChange={handleTextChange}\n    />\n  </Grid>\n);\n\nexport default EncodeTextInput;\n","function encode(input) {\n  //Throw error on bad inputs\n  if (typeof input !== \"string\" || input.length === 0) {\n    throw new Error(\"Invalid input\");\n  }\n\n  //Break input up into chunks of 4 characters\n  const chunksArray = input.match(/.{1,4}/g);\n\n  function encodeChunk(chunk) {\n    //Split string into array, reverse, and get character code in binary\n    const byteString = chunk\n      .split(\"\")\n      .reverse()\n      .map((char) => char.charCodeAt(0).toString(2).padStart(8, \"0\"));\n\n    //Zero-pad to a length of 4 bytes\n    const zeroFilled = byteString.join(\"\").padStart(32, \"0\");\n\n    //Split into array of 4 bytes\n    const byteArray = zeroFilled.match(/.{1,8}/g);\n\n    //Rearrange bits according to pattern provided in challenge\n    let encodedArray = [];\n    for (let j = 0; j < 8; j++) {\n      for (let i = 0; i < byteArray.length; i++) {\n        encodedArray.push(byteArray[i][j]);\n      }\n    }\n\n    //Return decimal value of encoded value\n    const decimalValue = parseInt(encodedArray.join(\"\"), 2);\n    return decimalValue;\n  }\n\n  return chunksArray.map((chunk) => encodeChunk(chunk));\n}\n\nexport default encode;\n","import React from \"react\";\nimport { Grid, makeStyles } from \"@material-ui/core\";\nimport encode from \"../utils/encode\";\n\nconst useStyles = makeStyles({\n  root: {\n    backgroundColor: \"#ccc\",\n    borderRadius: \"3px\",\n  },\n});\n\nconst EncodedValuesCodeBlock = ({ text }) => {\n  const classes = useStyles();\n\n  return (\n    <Grid item xs={12} md={6} className={classes.root}>\n      {text.length > 0 && (\n        <pre style={{ whiteSpace: \"pre-wrap\" }}>\n          <code>\n            [\n            {encode(text).length > 1\n              ? encode(text).map(\n                  (value, i) =>\n                    `${value}${i === encode(text).length - 1 ? \"\" : \", \"}`\n                )\n              : encode(text)}\n            ]\n          </code>\n        </pre>\n      )}\n    </Grid>\n  );\n};\n\nexport default EncodedValuesCodeBlock;\n","import React from \"react\";\nimport { Grid, InputAdornment, TextField } from \"@material-ui/core\";\n\nconst DecodeValuesInput = ({ value, handleValueChange, error }) => (\n  <Grid item xs={12} md={6}>\n    <TextField\n      id=\"decode-values-input\"\n      label=\"Decode Values Here!\"\n      color=\"secondary\"\n      fullWidth\n      value={value}\n      error={error}\n      helperText={\n        error ? \"Invalid Input\" : \"Delimit decimal integers with commas\"\n      }\n      onChange={handleValueChange}\n      InputProps={{\n        startAdornment: <InputAdornment position=\"start\">[</InputAdornment>,\n        endAdornment: <InputAdornment position=\"end\">]</InputAdornment>,\n      }}\n    />\n  </Grid>\n);\n\nexport default DecodeValuesInput;\n","function decode(input) {\n  //Throw error if input is not an array of numbers\n  if (\n    !Array.isArray(input) ||\n    !input.every((value) => typeof value === \"number\")\n  ) {\n    throw new Error(\"Invalid input\");\n  }\n\n  function decodeChunk(chunk) {\n    //Parse decimal value to 32 bits\n    const encodedChunk = chunk.toString(2).padStart(32, \"0\");\n\n    //Split into 4 bytes\n    const chunkArray = encodedChunk.match(/.{1,8}/g);\n\n    //Rearrange bits according to provided pattern\n    let decodedChunk = [];\n    for (let k = 0; k < chunkArray.length; k++) {\n      for (let i = 0; i < chunkArray.length; i++) {\n        for (let j = 0; j < 5; j += 4) {\n          decodedChunk.push(chunkArray[i][j + k]);\n        }\n      }\n    }\n\n    //Split into 4 bytes and reverse\n    const decodedByteArray = decodedChunk\n      .join(\"\")\n      .match(/.{1,8}/g)\n      .reverse();\n\n    //Convert Bytes into character values after removing null values\n    const charactersArray = decodedByteArray\n      .filter((value) => parseInt(value, 2) !== 0)\n      .map((value) => String.fromCharCode(parseInt(value, 2)));\n\n    return charactersArray.join(\"\");\n  }\n\n  const chunks = input.map((value) => decodeChunk(value));\n  const decodedString = chunks.join(\"\");\n\n  return decodedString;\n}\n\nexport default decode;\n","import React from \"react\";\nimport { Grid, makeStyles } from \"@material-ui/core\";\nimport decode from \"../utils/decode\";\n\nconst useStyles = makeStyles({\n  root: {\n    backgroundColor: \"#ccc\",\n    borderRadius: \"3px\",\n  },\n});\n\nconst DecodedTextCodeBlock = ({ values }) => {\n  const classes = useStyles();\n\n  return (\n    <Grid item xs={12} md={6} className={classes.root}>\n      {values.length > 0 && (\n        <pre style={{ whiteSpace: \"pre-wrap\" }}>\n          <code>{decode(values)}</code>\n        </pre>\n      )}\n    </Grid>\n  );\n};\n\nexport default DecodedTextCodeBlock;\n","import React, { useState } from \"react\";\nimport {\n  CssBaseline,\n  Container,\n  Grid,\n  makeStyles,\n  Typography,\n} from \"@material-ui/core\";\n\n//Components\nimport EncodeTextInput from \"./EncodeTextInput\";\nimport EncodedValuesCodeBlock from \"./EncodedValuesCodeBlock\";\nimport DecodeValuesInput from \"./DecodeValuesInput\";\nimport DecodedTextCodeBlock from \"./DecodedTextCodeBlock\";\n\nconst useStyles = makeStyles({\n  marginTop: {\n    marginTop: \"2em\",\n  },\n});\n\nconst App = () => {\n  const classes = useStyles();\n  const [text, setText] = useState(\"\");\n  const [encodedValues, setEncodedValues] = useState(\"\");\n\n  const encodedValuesArray = encodedValues\n    .replace(/ /g, \"\")\n    .split(\",\")\n    .filter((value) => value !== \"\")\n    .map((value) => parseInt(value, 10));\n\n  const encodedValuesInputError = !encodedValuesArray.every((value) => {\n    return typeof value === \"number\" && value >= 0 && value <= 4294967296;\n  });\n\n  const handleTextChange = (event) => {\n    setText(event.target.value);\n  };\n\n  const handleValueChange = (event) => {\n    setEncodedValues(event.target.value);\n  };\n\n  return (\n    <>\n      <CssBaseline />\n      <Container maxWidth=\"md\">\n        <Grid container direction=\"column\" justify=\"center\" spacing={6}>\n          <Grid item xs={12}>\n            <Typography variant=\"h4\" align=\"center\">\n              Art and Logic Encoder Challenge\n            </Typography>\n          </Grid>\n          <Grid\n            item\n            xs={12}\n            container\n            spacing={3}\n            className={classes.marginTop}\n          >\n            <EncodeTextInput text={text} handleTextChange={handleTextChange} />\n            <EncodedValuesCodeBlock text={text} />\n          </Grid>\n          <Grid\n            item\n            xs={12}\n            container\n            spacing={3}\n            className={classes.marginTop}\n          >\n            <DecodeValuesInput\n              value={encodedValues}\n              handleValueChange={handleValueChange}\n              error={encodedValuesInputError}\n            />\n            <DecodedTextCodeBlock values={encodedValuesArray} />\n          </Grid>\n        </Grid>\n      </Container>\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}